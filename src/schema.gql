# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountTypeResponse {
  role: String!
  user: User!
}

enum BaseUnit {
  KG
  NUMBER
  STRIP
  VIAL
}

input CreateItemCategoryInput {
  name: String!
  parentCategoryId: String
}

input CreateItemInput {
  baseUnit: BaseUnit!
  category: [String!]
  hsnCode: String!
  instructions: String!
  mrpBaseUnit: Float!
  name: String!
  wholesalePrice: Float!
}

input CreateOrganizationInput {
  active: Boolean
  address: String!
  city: String!
  contact: String!
  country: String!
  description: String!
  name: String!
}

input CreatePharmacyInput {
  contactInfo: String
  location: String!
  name: String!
  organizationId: String
}

input CreatePharmacyStockInput {
  itemId: String!
  pharmacyId: String!
  qty: Float!
  warehouseId: String!
}

input CreateSkuNameInput {
  itemId: String!
  organizationId: String!
  warehouseId: String!
}

input CreateStockMovementInput {
  batchName: String
  expiry: DateTime
  itemId: String!
  pharmacyStockId: String
  qty: Float!
  warehouseStockId: String
}

input CreateUserInput {
  confirmationToken: String
  email: String!
  name: String
  orgId: String
  password: String!
  role: UserRole!
  username: String!
}

input CreateWarehouseInput {
  adminId: String
  area: String!
  location: String!
  name: String!
  organizationId: String
}

input CreateWarehouseStockInput {
  batchName: String!
  expiry: DateTime!
  itemId: String!
  organizationId: String!
  qty: Float!
  sku: String!
  stockLevel: String
  stockStatus: String
  stocklevelMax: Float
  stocklevelMin: Float
  warehouseId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteItemCategoryInput {
  id: String!
}

input DeleteItemCategoryRelationInput {
  id: String!
}

input DeleteItemInput {
  id: String!
}

input DeleteOrganizationInput {
  id: String!
}

input DeletePharmacyInput {
  id: String!
}

input DeletePharmacyStockInput {
  id: String!
}

input DeleteStockMovementInput {
  id: String!
}

input DeleteWarehouseInput {
  id: String!
}

input DeleteWarehouseStockInput {
  id: String!
}

input ForgotPasswordConfirmationInput {
  confirmationToken: String!
  newPassword: String!
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordResponse {
  token: String!
}

type GenerateSku {
  sku: String!
}

type Item {
  Category: [ItemCategoryRel!]
  baseUnit: BaseUnit!
  createdAt: DateTime!
  hsnCode: String!
  id: String!
  instructions: String!
  mrpBaseUnit: Float
  name: String!
  updatedAt: DateTime
  wholesalePrice: Float
}

type ItemCategory {
  Item: [Item!]
  createdAt: DateTime!
  id: String!
  name: String!
  parentCategory: ItemParentCategory
  updatedAt: DateTime
}

type ItemCategoryRel {
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime
}

type ItemCategoryRelation {
  createdAt: DateTime!
  id: String!
  itemCategoryId: String!
  itemId: String!
  updatedAt: DateTime
}

type ItemParentCategory {
  Item: [Item!]
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LoginResponse {
  access_token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  create(createUserInput: CreateUserInput!): User!
  createItem(createItemInput: CreateItemInput!): Item!
  createItemCategory(createItemCategoryInput: CreateItemCategoryInput!): ItemCategory!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  createPharmacy(createPharmacyInput: CreatePharmacyInput!): Pharmacy!
  createPharmacyStock(createPharmacyStockInput: CreatePharmacyStockInput!): PharmacyStock!
  createStockMovement(createStockMovementInput: CreateStockMovementInput!): StockMovement!
  createWarehouse(createWarehouseInput: CreateWarehouseInput!): Warehouse!
  createWarehouseStock(createWarehouseStockInput: CreateWarehouseStockInput!): WarehouseStock!
  deleteItem(deleteItemInput: DeleteItemInput!): Item!
  deleteItemCategory(deleteItemCategoryInput: DeleteItemCategoryInput!): ItemCategory!
  deleteItemCategoryRelation(deleteItemCategoryRelationInput: DeleteItemCategoryRelationInput!): ItemCategoryRelation!
  deleteOrganization(deleteOrganizationInput: DeleteOrganizationInput!): Organization!
  deletePharmacy(deletePharmacyInput: DeletePharmacyInput!): Pharmacy!
  deletePharmacyStock(deletePharmacyStockInput: DeletePharmacyStockInput!): PharmacyStock!
  deleteStockMovement(deleteStockMovementInput: DeleteStockMovementInput!): StockMovement!
  deleteWarehouse(deleteWarehouseInput: DeleteWarehouseInput!): Warehouse!
  deleteWarehouseStock(deleteWarehouseStockInput: DeleteWarehouseStockInput!): WarehouseStock!
  forgotPassword(forgotPasswordInput: ForgotPasswordInput!): ForgotPasswordResponse!
  generateSKU(generateSkuNameInput: CreateSkuNameInput!): GenerateSku!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  resetPassword(resetPasswordInput: ResetPasswordInput!): Boolean!
  signup(signupUserInput: CreateUserInput!): SignupResponse!
  tokenConfirmation(tokenConfirmationInput: TokenConfirmationInput!): LoginResponse!
  updateItem(updateItemInput: UpdateItemInput!): Item!
  updateItemCategory(updateItemCategoryInput: UpdateItemCategoryInput!): ItemCategory!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  updatePharmacy(updatePharmacyInput: UpdatePharmacyInput!): Pharmacy!
  updateWarehouse(updateWarehouseInput: UpdateWarehouseInput!): Warehouse!
  updateprofile(updateProfileInput: UpdateProfileInput!): Boolean!
  validateForgotPassword(forgotPasswordInput: ForgotPasswordConfirmationInput!): ValidateForgotPasswordResponse!
}

type Organization {
  active: Boolean
  address: String!
  city: String!
  contact: String!
  country: String!
  createdAt: DateTime!
  description: String!
  id: String!
  name: String!
  updatedAt: DateTime
}

type PaginatedItemCategories {
  itemCategories: [ItemCategory!]!
  total: Float!
}

type PaginatedItems {
  items: [Item!]!
  total: Float!
}

type PaginatedOrganizations {
  organizations: [Organization!]!
  total: Float!
}

type PaginatedPharmacies {
  pharmacies: [Pharmacy!]!
  total: Float!
}

type PaginatedPharmacyStocks {
  pharmacyStocks: [PharmacyStock!]!
  total: Float!
}

type PaginatedUsers {
  total: Float!
  users: [User!]!
}

type PaginatedWarehouseStocks {
  total: Float!
  warehouseStocks: [WarehouseStock!]!
}

type PaginatedWarehouses {
  total: Float!
  warehouses: [Warehouse!]!
}

input PaginationArgs {
  skip: Int
  take: Int
}

type Pharmacy {
  contactInfo: String
  createdAt: DateTime!
  id: String!
  location: String!
  name: String!
  organization: Organization
  updatedAt: DateTime
}

type PharmacyStock {
  createdAt: DateTime!
  finalQty: Int!
  id: String!
  itemId: String!
  pharmacy: Pharmacy
  updatedAt: DateTime
  warehouse: Warehouse
}

type Query {
  PharmacyStock(id: String!): PharmacyStock!
  PharmacyStocks(paginationArgs: PaginationArgs): PaginatedPharmacyStocks
  account: AccountTypeResponse!
  getpermissions: JSON!
  item(id: String!): Item!
  itemCategories(paginationArgs: PaginationArgs): PaginatedItemCategories
  itemCategory(id: String!): ItemCategory!
  items(paginationArgs: PaginationArgs): PaginatedItems
  organization(id: String!): Organization!
  organizationByName(name: String!): Organization!
  organizations(paginationArgs: PaginationArgs): PaginatedOrganizations
  pharmacies(paginationArgs: PaginationArgs): PaginatedPharmacies
  pharmacy(id: String!): Pharmacy!
  sku(itemId: String!, organizationId: String!, warehouseId: String!): Sku!
  stockMovement(id: String!): StockMovement!
  stockMovements(paginationArgs: PaginationArgs): [StockMovement!]
  user(email: String!): User!
  users(paginationArgs: PaginationArgs): PaginatedUsers
  warehouse(id: String!): Warehouse!
  warehouseStock(id: String!): WarehouseStock!
  warehouseStocks(paginationArgs: PaginationArgs): PaginatedWarehouseStocks
  warehouses(paginationArgs: PaginationArgs): PaginatedWarehouses
}

input ResetPasswordInput {
  newPassword: String!
  oldPassword: String!
}

type SignupResponse {
  success: String!
}

type Sku {
  createdAt: DateTime!
  id: String!
  sku: String!
  stockLevel: String!
  stockStatus: String
  stocklevelMax: String
  stocklevelMin: String
  updatedAt: DateTime
}

type StockMovement {
  batchName: String
  createdAt: DateTime!
  expiry: DateTime
  id: String!
  itemId: String!
  pharmacyStockId: String
  qty: Float!
  updatedAt: DateTime
  warehouseStockId: String
}

input TokenConfirmationInput {
  token: String!
}

input UpdateItemCategoryInput {
  id: String!
  name: String
  parentCategoryId: String
}

input UpdateItemInput {
  baseUnit: BaseUnit
  category: [String!]
  hsnCode: String
  id: String!
  instructions: String
  mrpBaseUnit: Float
  name: String
  wholesalePrice: Float
}

input UpdateOrganizationInput {
  active: Boolean
  address: String
  city: String
  contact: String
  country: String
  description: String
  id: String!
  name: String
}

input UpdatePharmacyInput {
  contactInfo: String
  id: String!
  location: String
  name: String
  organizationId: String
}

input UpdateProfileInput {
  name: String!
  username: String!
}

input UpdateWarehouseInput {
  adminId: String
  area: String
  id: String!
  location: String
  name: String
  organizationId: String
}

type User {
  createdAt: DateTime!
  email: String!
  emailConfirmationToken: String
  id: String!
  isEmailConfirmed: Boolean!
  name: String
  organization: Organization
  updatedAt: DateTime
  username: String!
}

"""The roles available for a user"""
enum UserRole {
  ADMIN
  STAFF
  SUPERADMIN
}

type ValidateForgotPasswordResponse {
  message: String!
}

type Warehouse {
  admin: User
  area: String!
  createdAt: DateTime!
  id: String!
  location: String!
  name: String!
  organization: Organization
  updatedAt: DateTime
}

type WarehouseStock {
  SKU: Sku!
  createdAt: DateTime!
  finalQty: Float!
  id: String!
  item: Item!
  updatedAt: DateTime
  warehouse: Warehouse!
}