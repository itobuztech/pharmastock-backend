generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String        @unique
  password               String?
  name                   String?
  username               String?
  isEmailConfirmed       Boolean?      @default(false)
  emailConfirmationToken String?
  createdAt              DateTime      @default(now()) @map("created_at")
  updatedAt              DateTime?     @default(now()) @updatedAt @map("updated_at")
  roleId                 String        @map("role_id") @db.Uuid
  role                   Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  organizationId         String?       @map("organization_id") @db.Uuid
  organization           Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  pharmacyId             String?       @map("pharmacy_id") @db.Uuid
  pharmacy               Pharmacy?     @relation(fields: [pharmacyId], references: [id], onDelete: Cascade)
  status                 Boolean?      @default(true)

  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  privileges  Json?
  description String?
  userType    UserRole @map("user_type")
  User        User[]

  @@map("roles")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  STAFF
}

enum TransactionType {
  ENTRY
  MOVEMENT
  EXIT
}

model Organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String
  active        Boolean         @default(true)
  address       String
  city          String
  country       String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @default(now()) @updatedAt @map("updated_at")
  User          User[]
  contact       String
  status        Boolean?        @default(true)
  Warehouse     Warehouse[]
  Pharmacy      Pharmacy[]
  SKU           SKU[]
  StockMovement StockMovement[]

  @@map("organization")
}

model Warehouse {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  location       String?
  area           String
  organizationId String?          @map("organization_id") @db.Uuid
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @default(now()) @updatedAt @map("updated_at")
  status         Boolean?         @default(true)
  WarehouseStock WarehouseStock[]
  SKU            SKU[]
  StockMovement  StockMovement[]

  @@map("warehouse")
}

model Item {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  baseUnit               BaseUnit                 @map("base_unit")
  instructions           String
  mrp_base_unit          Int
  wholesale_price        Int
  hsn_code               String
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime?                @default(now()) @updatedAt @map("updated_at")
  status                 Boolean?                 @default(true)
  WarehouseStock         WarehouseStock[]
  PharmacyStock          PharmacyStock[]
  StockMovement          StockMovement[]
  ItemCategoryRelation   ItemCategoryRelation[]
  SKU                    SKU[]
  PharmacyStockClearance PharmacyStockClearance[]

  @@map("item")
}

enum BaseUnit {
  Piece
  Tablet
  Roll
  Bottle
  Pack
  Box
}

enum StockMovementsType {
  ENTRY
  MOVEMENT
  EXIT
}

model ItemCategory {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  parentCategoryId     String?                @map("parent_category_id") @db.Uuid
  parent               ItemCategory?          @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  children             ItemCategory[]         @relation("CategoryHierarchy")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime?              @default(now()) @updatedAt @map("updated_at")
  status               Boolean?               @default(true)
  ItemCategoryRelation ItemCategoryRelation[]

  @@map("item_category")
}

model ItemCategoryRelation {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemCategoryId String?       @map("item_category_id") @db.Uuid
  itemCategory   ItemCategory? @relation(fields: [itemCategoryId], references: [id], onDelete: Cascade)
  itemId         String?       @map("item_id") @db.Uuid
  item           Item?         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @default(now()) @updatedAt @map("updated_at")
  status         Boolean?      @default(true)

  @@map("item_category_relation")
}

model WarehouseStock {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId        String?         @map("item_id") @db.Uuid
  item          Item?           @relation(fields: [itemId], references: [id])
  final_qty     Int
  warehouseId   String?         @map("warehouse_id") @db.Uuid
  warehouse     Warehouse?      @relation(fields: [warehouseId], references: [id])
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @default(now()) @updatedAt @map("updated_at")
  status        Boolean?        @default(true)
  StockMovement StockMovement[]
  SKU           SKU?

  @@map("warehouse_stock")
}

enum StockLevel {
  LOW
  HIGH
  POSITIVE
  NEGATIVE
}

model StockMovement {
  id                       String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  warehouseStockId         String?                 @map("warehouseStock_id") @db.Uuid
  warehouseStock           WarehouseStock?         @relation(fields: [warehouseStockId], references: [id], onDelete: Cascade)
  qty                      Int
  itemId                   String                  @map("item_id") @db.Uuid
  item                     Item                    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  pharmacyStockId          String?                 @map("pharmacyStock_id") @db.Uuid
  pharmacyStock            PharmacyStock?          @relation(fields: [pharmacyStockId], references: [id], onDelete: Cascade)
  pharmacyId               String?                 @map("pharmacy_id") @db.Uuid
  pharmacy                 Pharmacy?               @relation(fields: [pharmacyId], references: [id], onDelete: Cascade)
  warehouseId              String?                 @map("warehouse_id") @db.Uuid
  warehouse                Warehouse?              @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  batch_name               String?
  transactionType          TransactionType?        @map("transaction_type")
  lot_name                 String?
  expiry                   DateTime?
  pharmacyStockClearanceId String?                 @map("pharmacyStockClearance_id") @db.Uuid
  pharmacyStockClearance   PharmacyStockClearance? @relation(fields: [pharmacyStockClearanceId], references: [id], onDelete: Cascade)
  organizationId           String?                 @map("organization_id") @db.Uuid
  organization             Organization?           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt                DateTime                @default(now()) @map("created_at")
  updatedAt                DateTime?               @default(now()) @updatedAt @map("updated_at")
  status                   Boolean?                @default(true)

  @@map("stock_movement")
}

model SKU {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sku              String
  itemId           String         @map("item_id") @db.Uuid
  item             Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  organizationId   String         @map("organization_id") @db.Uuid
  organization     Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  warehouseId      String         @map("warehouse_id") @db.Uuid
  warehouse        Warehouse      @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseStockId String         @unique @map("warehouseStock_id") @db.Uuid
  warehouseStock   WarehouseStock @relation(fields: [warehouseStockId], references: [id], onDelete: Cascade)
  stocklevel_min   Int?
  stocklevel_max   Int?
  stock_status     String?
  stockLevel       StockLevel?    @map("stock_level")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime?      @default(now()) @updatedAt @map("updated_at")
  status           Boolean?       @default(true)

  @@map("sku")
}

model Pharmacy {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String          @db.VarChar(255)
  location       String?
  organizationId String?         @map("organization_id") @db.Uuid
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contact_info   String          
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime?       @default(now()) @updatedAt @map("updated_at")
  status         Boolean?        @default(true)
  PharmacyStock  PharmacyStock[]
  User           User[]
  StockMovement  StockMovement[]

  @@map("pharmacy")
}

model PharmacyStock {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId                 String                   @map("item_id") @db.Uuid
  item                   Item                     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  pharmacyId             String                   @map("pharmacy_id") @db.Uuid
  pharmacy               Pharmacy                 @relation(fields: [pharmacyId], references: [id], onDelete: Cascade)
  final_qty              Int
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime?                @default(now()) @updatedAt @map("updated_at")
  status                 Boolean?                 @default(true)
  StockMovement          StockMovement[]
  PharmacyStockClearance PharmacyStockClearance[]

  @@map("pharmacy_stock")
}

model PharmacyStockClearance {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId          String          @map("item_id") @db.Uuid
  item            Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  pharmacyStockId String          @map("pharmacyStock_id") @db.Uuid
  pharmacyStock   PharmacyStock   @relation(fields: [pharmacyStockId], references: [id], onDelete: Cascade)
  qty             Int
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime?       @default(now()) @updatedAt @map("updated_at")
  status          Boolean?        @default(true)
  StockMovement   StockMovement[]

  @@map("pharmacy_stock_clearance")
}
