generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String        @unique
  password               String
  name                   String?
  username               String?
  isEmailConfirmed       Boolean?      @default(false)
  emailConfirmationToken String?
  createdAt              DateTime      @default(now()) @map("created_at")
  updatedAt              DateTime?     @default(now()) @updatedAt @map("updated_at")
  roleId                 String        @map("role_id") @db.Uuid
  role                   Role          @relation(fields: [roleId], references: [id])
  organizationId         String?       @map("organization_id") @db.Uuid
  organization           Organization? @relation(fields: [organizationId], references: [id])
  Warehouse              Warehouse[]

  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  privileges  Json?
  description String?
  userType    UserRole @map("user_type")
  User        User[]

  @@map("roles")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  STAFF
}

model Organization {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @unique
  description String
  active      Boolean     @default(true)
  address     String
  city        String
  country     String
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime?   @default(now()) @updatedAt @map("updated_at")
  User        User[]
  contact     String
  Warehouse   Warehouse[]
  Pharmacy    Pharmacy[]
  SKU         SKU[]

  @@map("organization")
}

model Warehouse {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @unique
  location       String?
  area           String
  organizationId String?          @map("organization_id") @db.Uuid
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  adminId        String?          @map("admin_id") @db.Uuid
  admin          User?            @relation(fields: [adminId], references: [id])
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @default(now()) @updatedAt @map("updated_at")
  WarehouseStock WarehouseStock[]
  PharmacyStock  PharmacyStock[]
  SKU            SKU[]

  @@map("warehouse")
}

model Item {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @unique
  baseUnit             BaseUnit               @map("base_unit")
  instructions         String
  mrp_base_unit        Int
  wholesale_price      Int
  hsn_code             String
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime?              @default(now()) @updatedAt @map("updated_at")
  WarehouseStock       WarehouseStock[]
  PharmacyStock        PharmacyStock[]
  StockMovement        StockMovement[]
  ItemCategoryRelation ItemCategoryRelation[]
  SKU                  SKU[]

  @@map("item")
}

enum BaseUnit {
  kg
  nos
  strip
  vial
}

model ItemCategory {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  parentCategoryId     String?                @map("parent_category_id") @db.Uuid
  parent               ItemCategory?          @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  children             ItemCategory[]         @relation("CategoryHierarchy")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime?              @default(now()) @updatedAt @map("updated_at")
  ItemCategoryRelation ItemCategoryRelation[]

  @@map("item_category")
}

model ItemCategoryRelation {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemCategoryId String?       @map("item_category_id") @db.Uuid
  itemCategory   ItemCategory? @relation(fields: [itemCategoryId], references: [id], onDelete: Cascade)
  itemId         String?       @map("item_id") @db.Uuid
  item           Item?         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @default(now()) @updatedAt @map("updated_at")

  @@map("item_category_relation")
}

model WarehouseStock {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId        String?         @unique @map("item_id") @db.Uuid
  item          Item?           @relation(fields: [itemId], references: [id])
  final_qty     Int
  warehouseId   String?         @map("warehouse_id") @db.Uuid
  warehouse     Warehouse?      @relation(fields: [warehouseId], references: [id])
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @default(now()) @updatedAt @map("updated_at")
  StockMovement StockMovement[]
  SKU           SKU?

  @@map("warehouse_stock")
}

enum StockLevel {
  LOW
  HIGH
  POSITIVE
  NEGATIVE
}

model StockMovement {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  warehouseStockId String?         @map("warehouseStock_id") @db.Uuid
  warehouseStock   WarehouseStock? @relation(fields: [warehouseStockId], references: [id])
  qty              Int
  itemId           String          @map("item_id") @db.Uuid
  item             Item            @relation(fields: [itemId], references: [id])
  pharmacyStockId  String?         @map("pharmacyStockId_id") @db.Uuid
  pharmacyStock    PharmacyStock?  @relation(fields: [pharmacyStockId], references: [id])
  batch_name       String?
  expiry           DateTime?
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime?       @default(now()) @updatedAt @map("updated_at")

  @@map("stock_movement")
}

model SKU {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sku              String         @unique
  itemId           String         @map("item_id") @db.Uuid
  item             Item           @relation(fields: [itemId], references: [id])
  organizationId   String         @map("organization_id") @db.Uuid
  organization     Organization   @relation(fields: [organizationId], references: [id])
  warehouseId      String         @map("warehouse_id") @db.Uuid
  warehouse        Warehouse      @relation(fields: [warehouseId], references: [id])
  warehouseStockId String         @unique @map("warehouseStock_id") @db.Uuid
  warehouseStock   WarehouseStock @relation(fields: [warehouseStockId], references: [id])
  stocklevel_min   Int?
  stocklevel_max   Int?
  stock_status     String?
  stockLevel       StockLevel?    @map("stock_level")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime?      @default(now()) @updatedAt @map("updated_at")

  @@map("sku")
}

model Pharmacy {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String          @unique @db.VarChar(255)
  location       String?
  organizationId String?         @map("organization_id") @db.Uuid
  organization   Organization?   @relation(fields: [organizationId], references: [id])
  contact_info   String          @db.VarChar(12)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime?       @default(now()) @updatedAt @map("updated_at")
  PharmacyStock  PharmacyStock[]

  @@map("pharmacy")
}

model PharmacyStock {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId        String          @map("item_id") @db.Uuid
  item          Item            @relation(fields: [itemId], references: [id])
  warehouseId   String          @map("warehouse_id") @db.Uuid
  warehouse     Warehouse       @relation(fields: [warehouseId], references: [id])
  pharmacyId    String          @map("pharmacy_id") @db.Uuid
  pharmacy      Pharmacy        @relation(fields: [pharmacyId], references: [id])
  final_qty     Int
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @default(now()) @updatedAt @map("updated_at")
  StockMovement StockMovement[]

  @@map("pharmacy_stock")
}
